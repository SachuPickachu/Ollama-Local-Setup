# Setup Security for Local LLM Stack
# This script enables basic security measures

param(
    [string]$AdminUsername = "admin",
    [string]$AdminPassword = "",
    [string]$TrustedIPs = ""
)

Write-Host "Setting up security for Local LLM Stack" -ForegroundColor Green

# Load environment
if (Test-Path "..\config\env.ps1") {
    . "..\config\env.ps1"
    Write-Host "Environment loaded. DATA_ROOT: $env:DATA_ROOT" -ForegroundColor Yellow
} else {
    Write-Host "Error: Environment file not found. Please run from scripts directory." -ForegroundColor Red
    exit 1
}

# Function to get user input securely
function Get-SecureInput {
    param([string]$Prompt)
    $secure = Read-Host $Prompt -AsSecureString
    $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secure)
    return [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
}

# Get admin credentials if not provided
if (-not $AdminPassword) {
    Write-Host "`nSetting up admin account for Open WebUI" -ForegroundColor Cyan
    $AdminUsername = Read-Host "Admin username (default: admin)"
    if (-not $AdminUsername) { $AdminUsername = "admin" }
    
    $AdminPassword = Get-SecureInput "Admin password"
    $ConfirmPassword = Get-SecureInput "Confirm password"
    
    if ($AdminPassword -ne $ConfirmPassword) {
        Write-Host "Error: Passwords don't match!" -ForegroundColor Red
        exit 1
    }
    
    if ($AdminPassword.Length -lt 8) {
        Write-Host "Error: Password must be at least 8 characters!" -ForegroundColor Red
        exit 1
    }
}

# Get trusted IPs if not provided
if (-not $TrustedIPs) {
    Write-Host "`nNetwork Security Configuration" -ForegroundColor Cyan
    Write-Host "Current network binding: $env:OLLAMA_HOST" -ForegroundColor Yellow
    
    $choice = Read-Host "Restrict access to specific IPs? (y/n, default: n)"
    if ($choice -eq "y" -or $choice -eq "Y") {
        Write-Host "Enter trusted IP addresses (comma-separated, e.g., 192.168.1.100,192.168.1.101)"
        Write-Host "Leave empty to use current subnet (192.168.1.0/24)"
        $TrustedIPs = Read-Host "Trusted IPs"
    }
}

# 1. Create security configuration directory
$SecurityDir = "$env:DATA_ROOT\security"
if (-not (Test-Path $SecurityDir)) {
    New-Item -ItemType Directory -Path $SecurityDir -Force | Out-Null
    Write-Host "Created security directory: $SecurityDir" -ForegroundColor Green
}

# 2. Save admin credentials securely
$CredentialsFile = "$SecurityDir\admin-credentials.txt"
$CredentialsContent = @"
# Admin Credentials for Open WebUI
# Generated on: $(Get-Date)
# Username: $AdminUsername
# Password: $AdminPassword
# 
# IMPORTANT: Store this securely and delete after first login!
# Change password in Open WebUI after first login.
"@

$CredentialsContent | Out-File -FilePath $CredentialsFile -Encoding UTF8
Write-Host "Admin credentials saved to: $CredentialsFile" -ForegroundColor Green
    Write-Host "Warning: IMPORTANT: Delete this file after first login!" -ForegroundColor Yellow

# 3. Create Open WebUI security config
$WebUIConfigDir = "$env:DATA_ROOT\webui\config"
if (-not (Test-Path $WebUIConfigDir)) {
    New-Item -ItemType Directory -Path $WebUIConfigDir -Force | Out-Null
}

$WebUISecurityConfig = @"
# Open WebUI Security Configuration
# Generated by setup-security.ps1

# Authentication
ENABLE_SIGNUP=false
ENABLE_LOGIN_FORM=true
ENABLE_OAUTH=false

# Admin user (create this account on first login)
DEFAULT_USER=$AdminUsername

# Session security
SESSION_SECRET_KEY=$(New-Guid)
JWT_SECRET_KEY=$(New-Guid)

# Rate limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=3600

# CORS (restrict to your network)
CORS_ORIGINS=["http://127.0.0.1:8080", "http://localhost:8080"]
"@

$WebUISecurityConfig | Out-File -FilePath "$WebUIConfigDir\security.env" -Encoding UTF8
    Write-Host "Open WebUI security config created" -ForegroundColor Green

# 4. Create Ollama security config
$OllamaConfigDir = "$env:DATA_ROOT\models\ollama\config"
if (-not (Test-Path $OllamaConfigDir)) {
    New-Item -ItemType Directory -Path $OllamaConfigDir -Force | Out-Null
}

$OllamaSecurityConfig = @"
# Ollama Security Configuration
# Generated by setup-security.ps1

# Network binding (consider restricting to specific IP)
OLLAMA_HOST=$env:OLLAMA_HOST

# API security (basic)
OLLAMA_ORIGINS=["http://127.0.0.1:8080", "http://localhost:8080"]

# Model access control
OLLAMA_MODELS_PATH=$env:OLLAMA_MODELS

# Logging for security monitoring
OLLAMA_DEBUG=true
"@

$OllamaSecurityConfig | Out-File -FilePath "$OllamaConfigDir\security.env" -Encoding UTF8
    Write-Host "Ollama security config created" -ForegroundColor Green

# 5. Create firewall restriction script if trusted IPs provided
if ($TrustedIPs) {
    $FirewallScript = "$SecurityDir\firewall-restrict.ps1"
    $FirewallContent = @"
# Restricted Firewall Rules for Local LLM
# Generated by setup-security.ps1

# Remove broad access rules
Get-NetFirewallRule | Where-Object {`$_.DisplayName -like "*Ollama*" -or `$_.DisplayName -like "*OpenWebUI*"} | Remove-NetFirewallRule -Confirm:`$false

# Add restricted rules for trusted IPs only
`$TrustedIPs = @("$($TrustedIPs -split ',' | ForEach-Object { `$_.Trim() })")

foreach (`$IP in `$TrustedIPs) {{
    # Ollama API (port 11434)
    New-NetFirewallRule -DisplayName "Ollama API - `$IP" -Direction Inbound -Protocol TCP -LocalPort 11434 -RemoteAddress `$IP -Action Allow -Profile Private
    
    # Open WebUI (port 8080)
    New-NetFirewallRule -DisplayName "Open WebUI - `$IP" -Direction Inbound -Protocol TCP -LocalPort 8080 -RemoteAddress `$IP -Action Allow -Profile Private
}}

    Write-Host "Firewall rules restricted to trusted IPs: `$(`$TrustedIPs -join ', ')" -ForegroundColor Green
"@

    $FirewallContent | Out-File -FilePath $FirewallScript -Encoding UTF8
    Write-Host "Restricted firewall script created: $FirewallScript" -ForegroundColor Green
}

# 6. Create security checklist
$ChecklistFile = "$SecurityDir\security-checklist.md"
$ChecklistContent = @"
# Security Checklist for Local LLM Stack

## Completed by setup-security.ps1
- [x] Admin account credentials created
- [x] Open WebUI security configuration
- [x] Ollama security configuration
- [x] Security directory structure

## ðŸ”’ Manual Steps Required

### 1. First Login Security
- [ ] Login to Open WebUI with admin credentials
- [ ] Change default admin password
- [ ] Delete credentials file: $CredentialsFile
- [ ] Disable self-signup in Open WebUI settings

### 2. Network Security
- [ ] Review current network binding: $env:OLLAMA_HOST
- [ ] Consider restricting to specific LAN IP instead of 0.0.0.0
- [ ] Run firewall restriction script if needed
- [ ] Test access from trusted devices only

### 3. Ongoing Security
- [ ] Regularly review chat logs for sensitive data
- [ ] Monitor access logs for unauthorized attempts
- [ ] Update models and dependencies regularly
- [ ] Backup security configurations

## ðŸš¨ Security Warnings
- Current setup is accessible to anyone on your network
- No encryption for data in transit or at rest
- Consider VPN for remote access
- Monitor for unusual activity

## ðŸ“ž Emergency Contacts
- Local admin: $AdminUsername
- Security config location: $SecurityDir
- Generated: $(Get-Date)
"@

$ChecklistContent | Out-File -FilePath $ChecklistFile -Encoding UTF8
    Write-Host "Security checklist created: $ChecklistFile" -ForegroundColor Green

# 7. Summary and next steps
Write-Host "`nSecurity Setup Complete!" -ForegroundColor Green
Write-Host "`nNext Steps:" -ForegroundColor Cyan
Write-Host "1. Start Open WebUI: .\start-webui.ps1" -ForegroundColor White
Write-Host "2. Login with: $AdminUsername / [password]" -ForegroundColor White
Write-Host "3. Change password immediately" -ForegroundColor White
Write-Host "4. Delete credentials file: $CredentialsFile" -ForegroundColor White
Write-Host "5. Review security checklist: $ChecklistFile" -ForegroundColor White

if ($TrustedIPs) {
    Write-Host "`nNetwork Security:" -ForegroundColor Cyan
    Write-Host "Run: $FirewallScript" -ForegroundColor White
    Write-Host "This will restrict access to: $TrustedIPs" -ForegroundColor White
}

    Write-Host "`nWarning: Current setup is still accessible to your network!" -ForegroundColor Yellow
Write-Host "For production use, consider additional security measures." -ForegroundColor Yellow 